PA4
Design Decisions


Estimate Selectivity:
* Different formulas for calculating selectivity were used depending on the predicate and chosen through a switch case statement 
* The formulas were drawn from the provided documentation 
* This method supports the following operators: 
   * EQUALS
   * NOT EQUALS
   * GREATER THAN
   * GREATER THAN OR EQUAL TO 
   * LESS THAN
   * LESSER THAN OR EQUAL TO 


Join Ordering:
* Join ordering was relatively simple, making heavy use of the provided helper functions, `enumerateSubsets`, and `computeCostAndCardOfSubplan`.
* The `orderJoins` function is essentially a linear maximum search through each of the possible enumerated sets, provided via the `enumerateSubsets` function. For each subset, and for each node inside that subset, use `computeCostAndCardOfSubplan` to find the lowest cost among all the `LogicalJoinNodes`. 
* Once the lowest cost has been found for a subset, it gets added to the `PlanCache` to find the best overall subset and checked against the global minimum cost it has found.
Changes to API
IntHistogram:
* A calcSum() method was added as a helper method for estimateSelectivity 
* It serves to calculate the sum of the number of values in each bucket within a range
   * For instance, to calculate the number of values greater than value v, calcSum() was used to calculate the number of values in buckets b+1 to numB, with b being the bucket v was in and numB being the total number of buckets 


Join Cost Estimation:
* No changes to the API were made
Join Ordering
* No changes to the API were made


Describe any missing or incomplete elements of your code.
There are no missing or incomplete elements of our code


Describe how long you spent on the assignment, and whether there was anything you found particularly difficult or confusing.
We worked on this project for about a week.


Join cost estimation, join ordering, and table statistics were not particularly difficult as the assignment description was very helpful in describing the optimizer’s configuration, pseudocode, and example cost estimations. 
If you collaborate with someone else, you have to describe how you split the workload.
Cameron did exercises 3 and 4 and Chelsea did exercises 1 and 2.