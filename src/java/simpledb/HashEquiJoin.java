package simpledb;

import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public class HashEquiJoin extends Operator {
	
	private JoinPredicate p;
	private DbIterator child1, child2;
    private static final long serialVersionUID = 1L;
    private Tuple t1 = null;
    private Tuple t2 = null;

    /**
     * Constructor. Accepts to children to join and the predicate to join them
     * on
     * 
     * @param p
     *            The predicate to use to join the children
     * @param child1
     *            Iterator for the left(outer) relation to join
     * @param child2
     *            Iterator for the right(inner) relation to join
     */
    public HashEquiJoin(JoinPredicate p, DbIterator child1, DbIterator child2) {
        // some code goes here
    	this.p = p;
    	this.child1 = child1;
    	this.child2 = child2;
    }

    public JoinPredicate getJoinPredicate() {
        // some code goes here
        return p;
    }

    public TupleDesc getTupleDesc() {
        // some code goes here
    	TupleDesc td1 = child1.getTupleDesc();
    	TupleDesc td2 = child2.getTupleDesc();
    	TupleDesc joinedTD = TupleDesc.merge(td1, td2);
        return joinedTD;
    }
    
    public String getJoinField1Name()
    {
        // some code goes here
    	return child1.getTupleDesc().getFieldName(p.getField1());
    }

    public String getJoinField2Name()
    {
        // some code goes here
        return child2.getTupleDesc().getFieldName(p.getField2());
    }
    
    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
        // some code goes here
    	super.open();
    	child1.open();
    	child2.open();
    }

    public void close() {
        // some code goes here
    	super.close();
    	child1.close();
    	child2.close();
    }

    public void rewind() throws DbException, TransactionAbortedException {
        // some code goes here\
    	child1.rewind();
    	child2.rewind();
    }

    
    HashMap<Object, ArrayList<Tuple>> map = new HashMap<Object, ArrayList<Tuple>>();
    public final static int MAP_SIZE = 20000;

    private boolean loadMap() throws DbException, TransactionAbortedException {
        int cnt = 0;
        map.clear();
        while (child1.hasNext()) {
            t1 = child1.next();
            ArrayList<Tuple> list = map.get(t1.getField(p.getField1()));
            if (list == null) {
                list = new ArrayList<Tuple>();
                map.put(t1.getField(p.getField1()), list);
            }
            list.add(t1);
            if (cnt++ == MAP_SIZE)
                return true;
        }
        return cnt > 0;

    }
    
    transient Iterator<Tuple> listIt = null;
    
    private Tuple processList() throws TransactionAbortedException, DbException {
        t1 = listIt.next();
        
        TupleDesc joinedTD = getTupleDesc();
		Tuple joinedTuple = new Tuple(joinedTD);
		int t1_size = t1.getTupleDesc().numFields();
		int t2_size = t2.getTupleDesc().numFields();
		
		// populate new tuple with contents of l and r tuple
		for (int i=0; i < t1_size; i++) {
			joinedTuple.setField(i, t1.getField(i));
		}
		for (int j=0; j < t2_size; j++) {
			joinedTuple.setField(t1_size+j, t2.getField(j));
		}
		
		return joinedTuple;

    }

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, there will be two copies of the join attribute in
     * the results. (Removing such duplicate columns can be done with an
     * additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     * 
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
        // some code goes here
    	 if (listIt != null && listIt.hasNext()) {
             return processList();
         }

         // loop around child2
         while (child2.hasNext()) {
             t2 = child2.next();

             // if match, create a combined tuple and fill it with the values
             // from both tuples
             ArrayList<Tuple> list = map.get(t2.getField(p.getField2()));
             if (list == null)
                 continue;
             listIt = list.iterator();

             return processList();

         }

         // child2 is done: advance child1
         child2.rewind();
         if (loadMap()) {
             return fetchNext();
         }

         return null;
    }

    @Override
    public DbIterator[] getChildren() {
        // some code goes here
        return new DbIterator[] {child1, child2};
    }

    @Override
    public void setChildren(DbIterator[] children) {
        // some code goes here
    	child1 = children[0];
    	child2 = children[1];
    }
    
}
